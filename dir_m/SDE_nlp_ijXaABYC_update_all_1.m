function ...
[ ...
 parameter ...
,n_i ...
,n_t_i_ ...
,t_it__ ...
,n_x ...
,X_est_ixt___ ...
,n_a ...
,a_est_xa__ ...
,A_est_xx__ ...
,B_est_omega ...
,B_est_l0 ...
,B_est_l1 ...
,n_j_i_ ...
,index_nt_from_nj_i__ ...
,ignore_Y_tru_ixj___ ...
,Y_tru_ixj___ ...
,C_est_omega ...
,C_est_l0 ...
,C_est_l1 ...
] = ...
SDE_nlp_ijXaABYC_update_all_1( ...
 parameter ...
,n_i ...
,n_t_i_ ...
,t_it__ ...
,n_x ...
,X_est_ixt___ ...
,n_a ...
,a_est_xa__ ...
,A_est_xx__ ...
,B_est_omega ...
,B_est_l0 ...
,B_est_l1 ...
,n_j_i_ ...
,index_nt_from_nj_i__ ...
,ignore_Y_tru_ixj___ ...
,Y_tru_ixj___ ...
,C_est_omega ...
,C_est_l0 ...
,C_est_l1 ...
);

str_thisfunction = 'SDE_nlp_ijXaABYC_update_all_1';
nf=0;

if (nargin<1);
disp(sprintf(' %% testing %s',str_thisfunction));
%%%%%%%%;
disp(sprintf(' %% see: test_%s_0.m',str_thisfunction));
%%%%%%%%;
disp('returning'); return;
end;%if (nargin<1);

na=0;
if (nargin<1+na); parameter=[]; end; na=na+1;
if (nargin<1+na); n_i=[]; end; na=na+1;
if (nargin<1+na); n_t_i_=[]; end; na=na+1;
if (nargin<1+na); t_it__=[]; end; na=na+1;
if (nargin<1+na); n_x=[]; end; na=na+1;
if (nargin<1+na); X_est_ixt___=[]; end; na=na+1;
if (nargin<1+na); n_a=[]; end; na=na+1;
if (nargin<1+na); a_est_xa__=[]; end; na=na+1;
if (nargin<1+na); A_est_xx__=[]; end; na=na+1;
if (nargin<1+na); B_est_omega=[]; end; na=na+1;
if (nargin<1+na); B_est_l0=[]; end; na=na+1;
if (nargin<1+na); B_est_l1=[]; end; na=na+1;
if (nargin<1+na); n_j_i_=[]; end; na=na+1;
if (nargin<1+na); index_nt_from_nj_i__=[]; end; na=na+1;
if (nargin<1+na); ignore_Y_tru_ixj___=[]; end; na=na+1;
if (nargin<1+na); Y_tru_ixj___=[]; end; na=na+1;
if (nargin<1+na); C_est_omega=[]; end; na=na+1;
if (nargin<1+na); C_est_l0=[]; end; na=na+1;
if (nargin<1+na); C_est_l1=[]; end; na=na+1;

if isempty(parameter); parameter = struct('type','parameter'); end;
if ~isfield(parameter,'tolerance_master'); parameter.tolerance_master = 1e-2; end;
if ~isfield(parameter,'flag_verbose'); parameter.flag_verbose = 0; end;
if ~isfield(parameter,'flag_disp'); parameter.flag_disp = 0; end;
if ~isfield(parameter,'flag_normalize_Y'); parameter.flag_normalize_Y = 0; end;
if ~isfield(parameter,'nshuffle_Y'); parameter.nshuffle_Y = 0; end;
if ~isfield(parameter,'flag_regularize_eccentricity_BtBn'); parameter.flag_regularize_eccentricity_BtBn = 1; end;
if ~isfield(parameter,'flag_regularize_eccentricity_simultaneous'); parameter.flag_regularize_eccentricity_simultaneous = 0; end;
if ~isfield(parameter,'n_iteration_BtBn'); parameter.n_iteration_BtBn = 16; end;
if ~isfield(parameter,'MaxFunEvals_use_BtBn'); parameter.MaxFunEvals_use_BtBn = 1024; end;
if ~isfield(parameter,'MaxFunEvals_use_simultaneous'); parameter.MaxFunEvals_use_simultaneous = 1024; end;
tolerance_master = parameter.tolerance_master;
flag_verbose = parameter.flag_verbose;
flag_disp = parameter.flag_disp;
flag_normalize_Y = parameter.flag_normalize_Y;
nshuffle_Y = parameter.nshuffle_Y;
flag_regularize_eccentricity_BtBn = parameter.flag_regularize_eccentricity_BtBn;
flag_regularize_eccentricity_simultaneous = parameter.flag_regularize_eccentricity_simultaneous;
n_iteration_BtBn = parameter.n_iteration_BtBn;
MaxFunEvals_use_BtBn = parameter.MaxFunEvals_use_BtBn;
MaxFunEvals_use_simultaneous = parameter.MaxFunEvals_use_simultaneous;

if flag_normalize_Y;
%%%%%%%%;
Y_avg_x_ = zeros(n_x,1);
Y_std_x_ = zeros(n_x,1);
for nx=0:n_x-1;
Y_sum1=0; Y_sum2=0; Y_n_use=0;
for ni=0:n_i-1;
ignore_Y_tru_xj__ = ignore_Y_tru_ixj___{1+ni};
Y_tru_xj__ = Y_tru_ixj___{1+ni};
ignore_Y_tru_j_ = ignore_Y_tru_xj__(1+nx,:);
Y_tru_j_ = Y_tru_xj__(1+nx,:);
index_use_ = efind(~ignore_Y_tru_j_); n_use = numel(index_use_);
if n_use> 0;
Y_tru_use_ = Y_tru_j_(1+index_use_);
Y_n_use = Y_n_use + n_use;
Y_sum1 = Y_sum1 + sum(Y_tru_use_.^1,'all');
Y_sum2 = Y_sum2 + sum(Y_tru_use_.^2,'all');
end;%if n_use> 0;
end;%for ni=0:n_i-1;
Y_avg = Y_sum1 / max(1,Y_n_use);
Y_var = Y_sum2 / max(1,Y_n_use) - Y_avg.^2;
Y_std = sqrt(Y_var);
Y_avg_x_(1+nx) = Y_avg;
Y_std_x_(1+nx) = Y_std;
end;%for nx=0:n_x-1;
%%%%%%%%;
Y_tru_nrm_ixj___ = cell(n_i,1);
for ni=0:n_i-1;
n_j = n_j_i_(1+ni);
Y_tru_nrm_xj__ = zeros(n_x,n_j);
ignore_Y_tru_xj__ = ignore_Y_tru_ixj___{1+ni};
Y_tru_xj__ = Y_tru_ixj___{1+ni};
for nx=0:n_x-1;
Y_avg = Y_avg_x_(1+nx); Y_std = Y_std_x_(1+nx);
ignore_Y_tru_j_ = ignore_Y_tru_xj__(1+nx,:);
Y_tru_j_ = Y_tru_xj__(1+nx,:);
index_use_ = efind(~ignore_Y_tru_j_); n_use = numel(index_use_);
if n_use> 0;
Y_tru_use_ = Y_tru_j_(1+index_use_);
Y_tru_nrm_ = (Y_tru_use_-Y_avg)./max(1e-12,Y_std);
Y_tru_nrm_j_ = zeros(n_j,1);
Y_tru_nrm_j_(1+index_use_) = Y_tru_nrm_;
Y_tru_nrm_xj__(1+nx,:) = Y_tru_nrm_j_;
end;%if n_use> 0;
end;%for nx=0:n_x-1;
Y_tru_nrm_ixj___{1+ni} = Y_tru_nrm_xj__;
end;%for ni=0:n_i-1;
%%%%%%%%;
if flag_disp;
figure(1);clf;figbig;
tmp_Y_0_ = [];
tmp_Y_1_ = [];
for ni=0:n_i-1;
n_j = n_j_i_(1+ni);
ignore_Y_tru_xj__ = ignore_Y_tru_ixj___{1+ni};
Y_tru_xj__ = Y_tru_ixj___{1+ni};
Y_tru_nrm_xj__ = Y_tru_nrm_ixj___{1+ni};
index_use_0_ = efind(~ignore_Y_tru_xj__(1+0,:));
index_use_1_ = efind(~ignore_Y_tru_xj__(1+1,:));
index_use_ = intersect(index_use_0_,index_use_1_);
subplot(1,2,1);
hold on;
plot(Y_tru_xj__(1+0,1+index_use_),Y_tru_xj__(1+1,1+index_use_),'.');
hold off;
subplot(1,2,2);
hold on;
plot(Y_tru_nrm_xj__(1+0,1+index_use_),Y_tru_nrm_xj__(1+1,1+index_use_),'.');
tmp_Y_0_ = [tmp_Y_0_,Y_tru_nrm_xj__(1+0,1+index_use_0_)];
tmp_Y_1_ = [tmp_Y_1_,Y_tru_nrm_xj__(1+1,1+index_use_1_)];
hold off;
end;%for ni=0:n_i-1;
subplot(1,2,1);xlabel('nv0');ylabel('nv1'); grid on;
subplot(1,2,2);xlabel('nv0');ylabel('nv1'); grid on;
disp(sprintf(' %% Y_avg_0 %+0.6f Y_avg_1 %+0.6f',Y_avg_x_));
disp(sprintf(' %% Y_std_0 %+0.6f Y_std_1 %+0.6f',Y_std_x_));
disp(sprintf(' %% Y_avg_nrm_0 %+0.6f Y_avg_nrm_1 %+0.6f',mean(tmp_Y_0_),mean(tmp_Y_1_)));
disp(sprintf(' %% Y_std_nrm_0 %+0.6f Y_std_nrm_1 %+0.6f',std(tmp_Y_0_,1),std(tmp_Y_1_,1)));
end;%if flag_disp;
Y_tru_ixj___ = Y_tru_nrm_ixj___;
%%%%%%%%;
end;%if flag_normalize_Y;

if nshuffle_Y> 0;
rng(nshuffle_Y); %<-- fixes the random seed for the shuffling. ;
%%%%%%%%;
ignore_Y_tru_prm_ixj___ = cell(n_i,1);
Y_tru_prm_ixj___ = cell(n_i,1);
for ni=0:n_i-1;
n_j = n_j_i_(1+ni);
Y_tru_xj__ = Y_tru_ixj___{1+ni};
ignore_Y_tru_xj__ = ignore_Y_tru_ixj___{1+ni};
tmp_p_ = randperm(n_j);
ignore_Y_tru_prm_xj__ = ignore_Y_tru_xj__(:,tmp_p_);
Y_tru_prm_xj__ = Y_tru_xj__(:,tmp_p_);
ignore_Y_tru_prm_ixj___{1+ni} = ignore_Y_tru_prm_xj__;
Y_tru_prm_ixj___{1+ni} = Y_tru_prm_xj__;
end;%for ni=0:n_i-1;
%%%%%%%%;
ignore_Y_tru_ixj___ = ignore_Y_tru_prm_ixj___;
Y_tru_ixj___ = Y_tru_prm_ixj___;
%%%%%%%%;
end;%if nshuffle_Y> 0;

%%%%%%%%;
% recover all. ;
%%%%%%%%;
parameter_est = struct('type','parameter_est');
parameter_est.tolerance_master = tolerance_master;
parameter_est.flag_verbose = flag_verbose-1;
parameter_est.str_update = 'CtCn_xx__ BtBn_xx__ a_xa__ A_xx__ X_xt__';
parameter_est.flag_regularize_eccentricity = flag_regularize_eccentricity_BtBn;
parameter_est.MaxFunEvals_use = MaxFunEvals_use_BtBn;
n_iteration = n_iteration_BtBn;
nlp_ijXYC_l_ = zeros(n_iteration,1);
nlp_idtZPB_l_ = zeros(n_iteration,1);
nlp_idtXaAB_l_ = zeros(n_iteration,1);
nlp_ijXaABYC_l_ = zeros(n_iteration,1);
nlp_ijXaABYC_integrated_l_ = zeros(n_iteration,1);
%%%%;
flag_continue = 1; niteration=0; nlp_ijXaABYC_integrated_pos=+Inf;
while flag_continue;
nlp_ijXaABYC_integrated_pre = nlp_ijXaABYC_integrated_pos;
[ ...
 parameter_est ...
,n_i ...
,n_t_i_ ...
,t_it__ ...
,n_x ...
,X_tmp_ixt___ ...
,n_a ...
,a_tmp_xa__ ...
,A_tmp_xx__ ...
,B_tmp_omega ...
,B_tmp_l0 ...
,B_tmp_l1 ...
,n_j_i_ ...
,index_nt_from_nj_i__ ...
,ignore_Y_tru_ixj___ ...
,Y_tru_ixj___ ...
,C_tmp_omega ...
,C_tmp_l0 ...
,C_tmp_l1 ...
] = ...
SDE_nlp_ijXaABYC_update_1( ...
 parameter_est ...
,n_i ...
,n_t_i_ ...
,t_it__ ...
,n_x ...
,X_est_ixt___ ...
,n_a ...
,a_est_xa__ ...
,A_est_xx__ ...
,B_est_omega ...
,B_est_l0 ...
,B_est_l1 ...
,n_j_i_ ...
,index_nt_from_nj_i__ ...
,ignore_Y_tru_ixj___ ...
,Y_tru_ixj___ ...
,C_est_omega ...
,C_est_l0 ...
,C_est_l1 ...
);
%%%%;
if (flag_verbose>0);
disp(sprintf(' %% processing niteration %d/%d',niteration,n_iteration));
[~,BtBn_est_xx__] =SDE_BtBn_0([],B_est_omega,B_est_l0,B_est_l1);
[~,CtCn_est_xx__] =SDE_BtBn_0([],C_est_omega,C_est_l0,C_est_l1);
disp(sprintf(' %% B_omega %+0.2f, B_l0 %+0.2f, B_l1 %+0.2f',B_est_omega,B_est_l0,B_est_l1));
disp(sprintf(' %% C_omega %+0.2f, C_l0 %+0.2f, C_l1 %+0.2f',C_est_omega,C_est_l0,C_est_l1));
if isfield(parameter_est,'nlp_ijXYC_pos'); disp(sprintf(' %% niteration %d/%d: nlp_ijXYC_pre %0.6f --> nlp_ijXYC_pos %0.6f',niteration,n_iteration,parameter_est.nlp_ijXYC_pre,parameter_est.nlp_ijXYC_pos)); nlp_ijXYC_l_(1+niteration) = parameter_est.nlp_ijXYC_pos; end;
if isfield(parameter_est,'nlp_idtZPB_pos'); disp(sprintf(' %% niteration %d/%d: nlp_idtZPB_pre %0.6f --> nlp_idtZPB_pos %0.6f',niteration,n_iteration,parameter_est.nlp_idtZPB_pre,parameter_est.nlp_idtZPB_pos)); nlp_idtZPB_l_(1+niteration) = parameter_est.nlp_idtZPB_pos; end;
if isfield(parameter_est,'nlp_idtXaAB_pos'); disp(sprintf(' %% niteration %d/%d: nlp_idtXaAB_pre %0.6f --> nlp_idtXaAB_pos %0.6f',niteration,n_iteration,parameter_est.nlp_idtXaAB_pre,parameter_est.nlp_idtXaAB_pos)); nlp_idtXaAB_l_(1+niteration) = parameter_est.nlp_idtXaAB_pos; end;
if isfield(parameter_est,'nlp_ijXaABYC_pos'); disp(sprintf(' %% niteration %d/%d: nlp_ijXaABYC_pre %0.6f --> nlp_ijXaABYC_pos %0.6f',niteration,n_iteration,parameter_est.nlp_ijXaABYC_pre,parameter_est.nlp_ijXaABYC_pos)); nlp_ijXaABYC_l_(1+niteration) = parameter_est.nlp_ijXaABYC_pos; end;
if isfield(parameter_est,'nlp_ijXaABYC_integrated_pos'); disp(sprintf(' %% niteration %d/%d: nlp_ijXaABYC_integrated_pre %0.6f --> nlp_ijXaABYC_integrated_pos %0.6f',niteration,n_iteration,parameter_est.nlp_ijXaABYC_integrated_pre,parameter_est.nlp_ijXaABYC_integrated_pos)); nlp_ijXaABYC_integrated_l_(1+niteration) = parameter_est.nlp_ijXaABYC_integrated_pos; end;
end;%if (flag_verbose>0);
%%%%;
flag_continue = 0;
nlp_ijXaABYC_integrated_pos = parameter_est.nlp_ijXaABYC_integrated_pos;
if (nlp_ijXaABYC_integrated_pos >= nlp_ijXaABYC_integrated_pre);
if (flag_verbose>0);
disp(sprintf(' %% niteration %d/%d: nlp_ijXaABYC_integrated_pos %0.6f >= nlp_ijXaABYC_integrated_pre %0.6f',niteration,n_iteration,nlp_ijXaABYC_integrated_pos,nlp_ijXaABYC_integrated_pre));
end;%if (flag_verbose>0);
flag_continue = 0; %<-- stopping. ;
end;%if (nlp_ijXaABYC_integrated_pos >= nlp_ijXaABYC_integrated_pre);
if (nlp_ijXaABYC_integrated_pos <  nlp_ijXaABYC_integrated_pre);
if (flag_verbose>0);
disp(sprintf(' %% niteration %d/%d: nlp_ijXaABYC_integrated_pos %0.6f <  nlp_ijXaABYC_integrated_pre %0.6f',niteration,n_iteration,nlp_ijXaABYC_integrated_pos,nlp_ijXaABYC_integrated_pre));
end;%if (flag_verbose>0);
X_est_ixt___ = X_tmp_ixt___;
a_est_xa__ = a_tmp_xa__;
A_est_xx__ = A_tmp_xx__;
B_est_omega = B_tmp_omega;
B_est_l0 = B_tmp_l0;
B_est_l1 = B_tmp_l1;
C_est_omega = C_tmp_omega;
C_est_l0 = C_tmp_l0;
C_est_l1 = C_tmp_l1;
flag_continue = 1; %<-- continue. ;
end;%if (nlp_ijXaABYC_integrated_pos <  nlp_ijXaABYC_integrated_pre);
flag_continue = flag_continue & (niteration<n_iteration) ;
niteration = niteration + 1;
end;%while flag_continue;
niteration_BtBn_final = niteration;
parameter_est.niteration_BtBn_final = niteration_BtBn_final;
parameter.niteration_BtBn_final = niteration_BtBn_final;
%%%%;
if (flag_verbose>0);
disp(sprintf(' %% stopping at niteration %d/%d',niteration,n_iteration));
[~,BtBn_est_xx__] =SDE_BtBn_0([],B_est_omega,B_est_l0,B_est_l1);
[~,CtCn_est_xx__] =SDE_BtBn_0([],C_est_omega,C_est_l0,C_est_l1);
disp(sprintf(' %% B_omega %+0.2f, B_l0 %+0.2f, B_l1 %+0.2f',B_est_omega,B_est_l0,B_est_l1));
disp(sprintf(' %% C_omega %+0.2f, C_l0 %+0.2f, C_l1 %+0.2f',C_est_omega,C_est_l0,C_est_l1));
if isfield(parameter_est,'nlp_ijXYC_pos'); disp(sprintf(' %% niteration %d/%d: nlp_ijXYC_pre %0.6f --> nlp_ijXYC_pos %0.6f',niteration,n_iteration,parameter_est.nlp_ijXYC_pre,parameter_est.nlp_ijXYC_pos)); nlp_ijXYC_l_(1+niteration) = parameter_est.nlp_ijXYC_pos; end;
if isfield(parameter_est,'nlp_idtZPB_pos'); disp(sprintf(' %% niteration %d/%d: nlp_idtZPB_pre %0.6f --> nlp_idtZPB_pos %0.6f',niteration,n_iteration,parameter_est.nlp_idtZPB_pre,parameter_est.nlp_idtZPB_pos)); nlp_idtZPB_l_(1+niteration) = parameter_est.nlp_idtZPB_pos; end;
if isfield(parameter_est,'nlp_idtXaAB_pos'); disp(sprintf(' %% niteration %d/%d: nlp_idtXaAB_pre %0.6f --> nlp_idtXaAB_pos %0.6f',niteration,n_iteration,parameter_est.nlp_idtXaAB_pre,parameter_est.nlp_idtXaAB_pos)); nlp_idtXaAB_l_(1+niteration) = parameter_est.nlp_idtXaAB_pos; end;
if isfield(parameter_est,'nlp_ijXaABYC_pos'); disp(sprintf(' %% niteration %d/%d: nlp_ijXaABYC_pre %0.6f --> nlp_ijXaABYC_pos %0.6f',niteration,n_iteration,parameter_est.nlp_ijXaABYC_pre,parameter_est.nlp_ijXaABYC_pos)); nlp_ijXaABYC_l_(1+niteration) = parameter_est.nlp_ijXaABYC_pos; end;
if isfield(parameter_est,'nlp_ijXaABYC_integrated_pos'); disp(sprintf(' %% niteration %d/%d: nlp_ijXaABYC_integrated_pre %0.6f --> nlp_ijXaABYC_integrated_pos %0.6f',niteration,n_iteration,parameter_est.nlp_ijXaABYC_integrated_pre,parameter_est.nlp_ijXaABYC_integrated_pos)); nlp_ijXaABYC_integrated_l_(1+niteration) = parameter_est.nlp_ijXaABYC_integrated_pos; end;
end;%if (flag_verbose>0);
%%%%;
if (flag_verbose>0); disp(sprintf(' %% polishing with simultaneous iteration: ')); end;
parameter_est.tolerance_master = tolerance_master;
parameter_est.flag_verbose = flag_verbose-1;
parameter_est.str_update = 'simultaneous';
parameter_est.flag_regularize_eccentricity = flag_regularize_eccentricity_simultaneous;
parameter_est.MaxFunEvals_use = MaxFunEvals_use_simultaneous;
[ ...
 parameter_est ...
,n_i ...
,n_t_i_ ...
,t_it__ ...
,n_x ...
,X_est_ixt___ ...
,n_a ...
,a_est_xa__ ...
,A_est_xx__ ...
,B_est_omega ...
,B_est_l0 ...
,B_est_l1 ...
,n_j_i_ ...
,index_nt_from_nj_i__ ...
,ignore_Y_tru_ixj___ ...
,Y_tru_ixj___ ...
,C_est_omega ...
,C_est_l0 ...
,C_est_l1 ...
] = ...
SDE_nlp_ijXaABYC_update_1( ...
 parameter_est ...
,n_i ...
,n_t_i_ ...
,t_it__ ...
,n_x ...
,X_est_ixt___ ...
,n_a ...
,a_est_xa__ ...
,A_est_xx__ ...
,B_est_omega ...
,B_est_l0 ...
,B_est_l1 ...
,n_j_i_ ...
,index_nt_from_nj_i__ ...
,ignore_Y_tru_ixj___ ...
,Y_tru_ixj___ ...
,C_est_omega ...
,C_est_l0 ...
,C_est_l1 ...
);
%%%%;
if (flag_verbose>0);
if isfield(parameter_est,'nlp_ijXaABYC_pre') & isfield(parameter_est,'nlp_ijXaABYC_pos');
disp(sprintf(' %% nlp_ijXaABYC_pre %0.6f --> nlp_ijXaABYC_pos %0.6f',parameter_est.nlp_ijXaABYC_pre,parameter_est.nlp_ijXaABYC_pos));
end;%if isfield(parameter_est,'nlp_ijXaABYC_pre') & isfield(parameter_est,'nlp_ijXaABYC_pos');
end;%if (flag_verbose>0);
%%%%;
if isfield(parameter_est,'nlp_ijXaABYC_pos');
parameter.nlp_ijXaABYC = parameter_est.nlp_ijXaABYC_pos;
end;%if isfield(parameter_est,'nlp_ijXaABYC_pos');
%%%%;

%%%%;
if flag_disp>0;
figure(1+nf);nf=nf+1;clf;figmed;figbeach();
p_row = 2; p_col = n_i; np=0;
%%%%;
prow = 0;
for pcol=0:p_col-1;
ni = pcol;
t_t_ = t_it__{1+ni}; T_ini = min(t_t_); T_max = max(t_t_);
tmp_W_xt__ = X_est_ixt___{1+ni}; tmp_str = 'X_est_xt__';
subplot(p_row,p_col,1+pcol+prow*p_col);
plot(t_t_,tmp_W_xt__(1,:),'r-',t_t_,tmp_W_xt__(2,:),'b-');
xlabel('time');ylabel(tmp_str,'Interpreter','none'); xlim([T_ini,T_max]);
%s = surfline_0(tmp_W_xt__(1,:),tmp_W_xt__(2,:),t_t_); set(s,'LineWidth',3);
%xlabel(sprintf('%s(1+0,:)',tmp_str),'Interpreter','none');
%ylabel(sprintf('%s(1+1,:)',tmp_str),'Interpreter','none');
title(sprintf('ni %d',ni),'Interpreter','none');
end;%for pcol=0:p_col-1;
%%%%;
prow = 1;
for pcol=0:p_col-1;
ni = pcol;
t_t_ = t_it__{1+ni}; T_ini = min(t_t_); T_max = max(t_t_);
tmp_W_xt__ = X_est_ixt___{1+ni}; tmp_str = 'X_est_xt__';
subplot(p_row,p_col,1+pcol+prow*p_col);
s = surfline_0(tmp_W_xt__(1,:),tmp_W_xt__(2,:),t_t_); set(s,'LineWidth',3);
xlabel(sprintf('%s(1+0,:)',tmp_str),'Interpreter','none');
ylabel(sprintf('%s(1+1,:)',tmp_str),'Interpreter','none');
title(sprintf('ni %d',ni),'Interpreter','none');
end;%for pcol=0:p_col-1;
%%%%;
sgtitle(sprintf('all: X_est_ixt___'),'Interpreter','none');
end;%if flag_disp>0;
%%%%%%%%;
